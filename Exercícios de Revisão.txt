Exercício 1:

class ContaBancaria {
    private double saldo = 0;
    private String Titular;
    private int NumeroDaConta = 15;

    void setTitular(String nome){
        this.Titular = nome;
    }

    void getTitular(){
        System.out.println(Titular);
    }

    void getNumeroDaConta(){
        System.out.println(NumeroDaConta);
    }

    void depositarValor(double valor){
        this.saldo += valor;
    }

    void sacarValor(double valor){
        if(valor >= saldo){
            saldo -= valor;
        }else{
            System.out.println("Saldo insuficiente");
        }
    }

    void consultarSaldo(){
        System.out.println(saldo);
    }
}

public class Encapsulamento {
    public static void main(String[] args) {
        ContaBancaria contabancaria = new ContaBancaria();
        contabancaria.setTitular("Francisco Nascimento Bendô");
        contabancaria.depositarValor(100);

        contabancaria.getTitular();
        contabancaria.getNumeroDaConta();
        contabancaria.consultarSaldo();

        contabancaria.sacarValor(10);
        contabancaria.consultarSaldo();
    }
}


Exercício 2:

class Calculadora {
    int resultadoInt;
    double resultadoDouble;
    int resultadoLista = 0;

    void somar(int x, int y){
        this.resultadoInt = x + y;
    }

    void somar(double x, double y){
        this.resultadoDouble = x + y;
    }

    void somar(int[] lista){
        for(int i = 0; i < 2; i++){
            this.resultadoLista += lista[i];
        }
    }
}

public class SobrecargaDeMetodos {
    public static void main(String[] args) {
        Calculadora calculadora = new Calculadora();

        int[] numeros = new int[2];
        numeros[0] = 10;
        numeros[1] = 10;

        calculadora.somar(10,10);
        System.out.println(calculadora.resultadoInt);

        calculadora.somar(10.0, 10.0);
        System.out.println(calculadora.resultadoDouble);

        calculadora.somar(numeros);
        System.out.println(calculadora.resultadoLista);
    }
}


Exercício 3:

class Animal{
    void comer(){
        System.out.println("comendo...");
    }

    void dormir(){
        System.out.println("dormindo...");
    }
}

class Cachorro extends Animal{
    void fazerSom(){
        System.out.println("au au");
    }
}

class Gato extends Animal{
    void fazerSom(){
        System.out.println("miau miau");
    }
}

public class Heranca {
    public static void main(String[] args) {
        Cachorro dog = new Cachorro();
        Gato cat = new Gato();

        dog.comer();
        dog.dormir();
        dog.fazerSom();

        cat.comer();
        cat.dormir();
        cat.fazerSom();
    }
}

Exercício 4:


abstract class Forma{
    abstract void calcularArea(double r);
    
}

class Circulo extends Forma{
    double resultado;
    @Override
    void calcularArea(double r) {
        this.resultado = (r * r) * 3.14;
    }
}

class Retangulo extends Forma{
    double resultado;
    @Override
    void calcularArea(double r) {
        this.resultado = r * r;
    }
}

public class ClasseAbstrata {
    public static void main(String[] args){
        Circulo circulo = new Circulo();
        Retangulo retangulo = new Retangulo();

        double raio = 2;
        double lado = 2;

        circulo.calcularArea(raio);
        System.out.println(circulo.resultado);

        retangulo.calcularArea(lado);
        System.out.println(retangulo.resultado);

    }
}


Exercício 5:

package revisao3;
import java.util.List;
import java.util.ArrayList;

abstract class Forma{
    abstract double calcularArea(double valor);
}

class Circulo extends Forma{
    double resultado;
    @Override
    double calcularArea(double r) {
        this.resultado = (r * r) * 3.14;
        return resultado;
    }

    @Override
    public String toString() {
        return "Área do Círculo: " + resultado;
    }
}

class Retangulo extends Forma{
    double resultado;
    @Override
    double calcularArea(double r) {
        this.resultado = r * r;
        return resultado;
    }

    @Override
    public String toString() {
        return "Área do Retângulo: " + resultado;
    }
}

public class Revisao {
    public static void main(String[] args) {

        List<Forma> formas = new ArrayList<>();
        Circulo circulo = new Circulo();
        Retangulo retangulo = new Retangulo();

        circulo.calcularArea(5);
        retangulo.calcularArea(5);

        formas.add(circulo);
        formas.add(retangulo);

        int i = 0;
        while (i < 2){
            System.out.println(formas.get(i));
            i++;
        }

    }
}


Exercício 6:

import java.util.ArrayList;
import java.util.List;

abstract class Veiculo {
    private String placa;
    private String marca;
    private String modelo;
    private int ano;
    private double precoPorDia;

    public Veiculo(String placa, String marca, String modelo, int ano, double precoPorDia) {
        this.placa = placa;
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
        this.precoPorDia = precoPorDia;
    }

    public String getInfo() {
        return "Placa: " + placa + ", Marca: " + marca + ", Modelo: " + modelo + ", Ano: " + ano + ", Preço por dia: " + precoPorDia;
    }

    public double calcularValorLocacao(int dias) {
        return dias * precoPorDia;
    }
}

class Carro extends Veiculo {
    private int quantidadeDePortas;

    public Carro(String placa, String marca, String modelo, int ano, double precoPorDia, int quantidadeDePortas) {
        super(placa, marca, modelo, ano, precoPorDia);
        this.quantidadeDePortas = quantidadeDePortas;
    }

    @Override
    public double calcularValorLocacao(int dias) {
        double valorTotal = super.calcularValorLocacao(dias);
        if (dias > 7) {
            valorTotal *= 0.95; // 5% de desconto
        }
        return valorTotal;
    }

    @Override
    public String getInfo() {
        return super.getInfo() + ", Quantidade de Portas: " + quantidadeDePortas;
    }
}

class Moto extends Veiculo {
    private int cilindrada;

    public Moto(String placa, String marca, String modelo, int ano, double precoPorDia, int cilindrada) {
        super(placa, marca, modelo, ano, precoPorDia);
        this.cilindrada = cilindrada;
    }

    @Override
    public double calcularValorLocacao(int dias) {
        double valorTotal = super.calcularValorLocacao(dias);
        valorTotal *= 1.10; // acréscimo de 10%
        return valorTotal;
    }

    @Override
    public String getInfo() {
        return super.getInfo() + ", Cilindrada: " + cilindrada;
    }
}

class Cliente {
    private String nome;
    private String cpf;
    private List<String> historicoDeLocacoes;

    public Cliente(String nome, String cpf) {
        this.nome = nome;
        this.cpf = cpf;
        this.historicoDeLocacoes = new ArrayList<>();
    }

    public void alugarVeiculo(Veiculo veiculo, int dias) {
        double valorLocacao = veiculo.calcularValorLocacao(dias);
        historicoDeLocacoes.add(veiculo.getInfo() + ", Dias: " + dias + ", Valor: R$" + valorLocacao);
        System.out.println("Veículo alugado: " + veiculo.getInfo() + ", Valor da locação: R$" + valorLocacao);
    }

    public void mostrarHistoricoDeLocacoes() {
        System.out.println("Histórico de Locações de " + nome + ":");
        for (String locacao : historicoDeLocacoes) {
            System.out.println(locacao);
        }
    }
}

public class SistemaLocacaoVeiculos {
    public static void main(String[] args) {
        Carro carro = new Carro("ABC1234", "Toyota", "Corolla", 2020, 100, 4);
        Moto moto = new Moto("XYZ5678", "Honda", "CB500", 2019, 80, 500);
        
        Cliente cliente = new Cliente("João Silva", "123.456.789-00");

        cliente.alugarVeiculo(carro, 10);
        cliente.alugarVeiculo(moto, 5);

        cliente.mostrarHistoricoDeLocacoes();
    }
}

Exercício 7:

